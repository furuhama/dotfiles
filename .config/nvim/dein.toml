[[plugins]]
repo = 'Shougo/dein.vim'

# ==========================
# basic
# ==========================

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
    function! s:fern_preview_init() abort
      nmap <buffer><expr>
        \ <Plug>(fern-my-preview-or-nop)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:edit)\<C-w>p",
        \   "",
        \ )

      " Preview file content with <shift-j> <shift-k> moving
      nmap <buffer><expr> J
        \ fern#smart#drawer(
        \   "j\<Plug>(fern-my-preview-or-nop)",
        \   "j",
        \ )
      nmap <buffer><expr> K
        \ fern#smart#drawer(
        \   "k\<Plug>(fern-my-preview-or-nop)",
        \   "k",
        \ )
    endfunction

    augroup my-fern-preview
      autocmd! *
      autocmd FileType fern call s:fern_preview_init()
    augroup END

    let g:fern#default_hidden=1

    nnoremap <silent><C-x> :Fern . -drawer -toggle<CR>
'''

[[plugins]]
repo = 'tyru/columnskip.vim'
hook_add = '''
    nmap <silent> <C-j> <Plug>(columnskip-j)
    xmap <silent> <C-j> <Plug>(columnskip-j)

    nmap <silent> <C-k> <Plug>(columnskip-k)
    xmap <silent> <C-k> <Plug>(columnskip-k)
'''

# ===============
# search
# ===============

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'
hook_add = '''
    let g:fzf_layout = { 'down': '~30%' }
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    " these functions are defined in fzf.vim
    nnoremap <silent><C-l> :Rg<CR>
    nnoremap <silent><C-s> :GitFiles<CR>
'''

# ===============
# display
# ===============

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
    let g:NERDSpaceDelims=1
    let g:NERDDefaultAlign='left'
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# ===============
# git
# ===============

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
    command Blame Gina blame

    function! GinaOpenPR() abort
        redir => s:messages
            call gina#action#call('blame:echo')
        redir END
        let s:lastmsg = get(split(s:messages, "\n"), -1, "")
        let s:commit_hash = matchstr(s:lastmsg, '\[.*\]$')
        if strlen(s:commit_hash) < 2
            return
        endif

        let s:commit_hash = s:commit_hash[1:strlen(s:commit_hash)-2]
        call system(printf("git openpr %s", s:commit_hash))
    endfunction

    command OpenPR call GinaOpenPR()
'''


[[plugins]]
repo = 'furuhama/vim-tig-viewer'

# ==========================
# Language server & lint
# ==========================

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_source = '''
    set hidden
    let g:LanguageClient_serverCommands = {
        \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
        \ }
    let g:LanguageClient_autoStart = 1
    nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

# ===============
# completion
# ===============

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    call deoplete#custom#option({ 'smart_case': 1, 'ignore_case': 1 })

    " <TAB>: completion.
    imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

# ==========================
# color scheme
# ==========================

# dark background colorscheme

[[plugins]]
repo = 'rhysd/vim-color-spring-night'
# hook_add = '''
#     colorscheme spring-night
#     set background=dark
# '''

[[plugins]]
repo = 'arcticicestudio/nord-vim'
# hook_add = '''
#     colorscheme nord
#     set background=dark
#     let g:nord_italic=1
#     let g:nord_italic_comments=1
# '''

[[plugins]]
repo = 'morhetz/gruvbox'
# hook_add = '''
#     colorscheme gruvbox
#     set background=dark
#     let g:gruvbox_sign_column='bg0'
# '''

[[plugins]]
repo = 'sainnhe/gruvbox-material'
hook_add = '''
    colorscheme gruvbox-material
    set background=dark
    let g:gruvbox_material_disable_italic_comment = 1
'''

# ==========================
# status line
# ==========================

[[plugins]] # ステータスライン
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
            \ 'mode_map': {'c': 'NORMAL'},
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'fugitive', 'dirname' ] ]
            \ },
            \ 'component_function': {
            \   'modified': 'LightlineModified',
            \   'readonly': 'LightlineReadonly',
            \   'fugitive': 'LightlineFugitive',
            \   'dirname': 'LightlineDirname',
            \   'fileformat': 'LightlineFileformat',
            \   'filetype': 'LightlineFiletype',
            \   'fileencoding': 'LightlineFileencoding',
            \   'mode': 'LightlineMode',
            \   'ale': 'ALEGetStatusLine'
            \ }
            \ }

    function! LightlineModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightlineReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightlineDirname()
        return expand('%')
    endfunction

    " MEMO: DO NOT use this function, use `LightlineDirname`
    "
    " function! LightlineFilename()
    "     return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
    "           \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
    "           \  &ft == 'unite' ? unite#get_status_string() :
    "           \  &ft == 'vimshell' ? vimshell#get_status_string() :
    "           \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
    "           \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    " endfunction

    function! LightlineFugitive()
        if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
            return fugitive#head()
        else
            return ''
        endif
    endfunction

    function! LightlineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightlineFiletype()
        return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightlineFileencoding()
        return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightlineMode()
        return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'

    if has('syntax')
        augroup InsertHook
            autocmd!
            autocmd InsertEnter * call s:StatusLine('Enter')
            autocmd InsertLeave * call s:StatusLine('Leave')
        augroup END
    endif

    let s:slhlcmd = ''
    function! s:StatusLine(mode)
        if a:mode == 'Enter'
            silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
            silent exec g:hi_insert
        else
            highlight clear StatusLine
            silent exec s:slhlcmd
        endif
    endfunction

    function! s:GetHighlight(hi)
        redir => hl
        exec 'highlight '.a:hi
        redir END
        let hl = substitute(hl, '[\r\n]', '', 'g')
        let hl = substitute(hl, 'xxx', '', '')
        return hl
    endfunction
'''
